[build-system]
requires = ["setuptools>=61.0", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "pyexcel"
# 自动生成版本号，这里不用手动设置版本号
#version = "1.0.0"
# 将 version 标记为动态生成
dynamic = ["version"]
authors = [
    { name = "kevin", email = "kevin@example.com" },
]
description = "一个处理Excel文件的工具"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "xlwings>=0.28; python_version>='3.10'",
    "pywin32>=305; platform_system=='Windows'"
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
]

[project.urls]
"Homepage" = "https://kisa747.top"
"Bug Tracker" = "https://github.com/kisa747"


# 设置 [tool.setuptools_scm] 标签，表示启用setuptools_scm
[tool.setuptools_scm]
# 根据 git 信息自动将版本号写到 __version__.py
write_to = "src/pyexcel/__version__.py"


# black配置
[tool.black]
line-length = 90
skip-string-normalization = true
include = '\.py[iw]?$'

# isor 配置
[tool.isort]
# Ensures the output doesn't save if the resulting file contains syntax errors.
atomic = true
# Compatibility with black
profile = "black"
line_length = 90
# Treat project as a git repository and ignore files listed in .gitignore.
# NOTE: This requires git to be installed and accessible from the same shell as isort.
# skip_gitignore = true


# mypy配置
[tool.mypy]
ignore_missing_imports = true
# Disables using type information in installed packages (see PEP 561).
# This will also disable searching for a usable Python executable.
# 不检查已安装的包
no_site_packages = true


# pytest配置
[tool.pytest.ini_options]
#addopts = "-ra -q --strict-config --strict-markers --cov --cov-report html"
addopts = "-ra -p no:faulthandler"
# 源码目录
pythonpath = ["src"]
# 测试目录
testpaths = ["tests"]


# coverage配置
[tool.coverage.run]
# 分支覆盖
branch = true
# .coverage文件位置
data_file = ".pytest_cache/.coverage"
# 不使用 pytest-cov 插件，需要设置此参数
source = ["src"]
# 代码覆盖测试要排除的文件
omit = ['tests/__init__\.py']
[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',
    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
    # Don't complain about abstract methods, they aren't run:
    '@(abc\.)?abstractmethod',
]
#[tool.coverage.html]
#directory = "coverage_report_html"


# tox配置
[tool.tox]
legacy_tox_ini = """
[tox]
# 根据官方文档，使用setuptools打包，必须设置隔离环境
isolated_build = True
# scoop 配置的python，不能使用简称
envlist = python310,python311


[testenv]
description = 在多个python环境下测试
deps =
    pytest
# 此处参数会将 [pytest] addopts 配置覆盖掉
commands = pytest -s -p no:faulthandler


# 使用 tox -e no-cov 命令执行
[testenv:no-cov]
description = 不生成报告，使用pytest测试
basepython = python311
deps =
    pytest
commands = pytest -p no:faulthandler


# 使用 tox -e cov 命令执行
[testenv:cov]
description = 生成报告，使用pytest测试
basepython = python310
deps =
    pytest
    pytest-cov
commands = pytest -p no:faulthandler --cov --cov-report=html


# 使用 tox -e build 命令执行
[testenv:build]
description = 构建 whl 安装包
basepython = python310
deps =
    setuptools>=61.0
    build>=0.9
commands =
    python -m build -w

"""